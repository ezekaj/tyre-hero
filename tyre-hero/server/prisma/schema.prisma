// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with role-based access control
model User {
  id                String     @id @default(cuid())
  email             String     @unique
  password          String
  firstName         String
  lastName          String
  phoneNumber       String?
  avatar            String?
  role              UserRole   @default(CUSTOMER)
  isEmailVerified   Boolean    @default(false)
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  isActive          Boolean    @default(true)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // User profile information
  profile           UserProfile?

  // Relationships
  bookings          Booking[]
  reviews           Review[]
  addresses         Address[]
  refreshTokens     RefreshToken[]
  notifications     Notification[]

  @@map("users")
}

model UserProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  dateOfBirth     DateTime?
  emergencyContact String?
  preferences     Json?    // Store user preferences as JSON
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model RefreshToken {
  id          String   @id @default(cuid())
  token       String   @unique
  userId      String
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Address {
  id              String   @id @default(cuid())
  userId          String
  label           String   // e.g., "Home", "Work"
  addressLine1    String
  addressLine2    String?
  city            String
  state           String
  postalCode      String
  country         String   @default("UAE")
  latitude        Float?
  longitude       Float?
  isDefault       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings        Booking[]

  @@map("addresses")
}

model Service {
  id              String    @id @default(cuid())
  name            String
  description     String
  category        ServiceCategory
  basePrice       Float
  estimatedDuration Int     // in minutes
  isActive        Boolean   @default(true)
  icon            String?
  features        String[]  // Array of service features
  requirements    Json?     // Service-specific requirements
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  bookings        Booking[]
  serviceAddOns   ServiceAddOn[]

  @@map("services")
}

model ServiceAddOn {
  id              String   @id @default(cuid())
  serviceId       String
  name            String
  description     String?
  price           Float
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  service         Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  bookingAddOns   BookingAddOn[]

  @@map("service_add_ons")
}

model Booking {
  id                  String        @id @default(cuid())
  bookingNumber       String        @unique
  userId              String
  serviceId           String
  addressId           String
  scheduledDateTime   DateTime
  status              BookingStatus @default(PENDING)
  priority            Priority      @default(NORMAL)

  // Vehicle information
  vehicleMake         String
  vehicleModel        String
  vehicleYear         Int
  vehicleColor        String?
  licensePlate        String?

  // Damage information
  damageDescription   String?
  damagePhotos        String[]      // Array of photo URLs
  estimatedCost       Float?
  finalCost           Float?

  // Technician assignment
  assignedTechnicianId String?

  // Payment information
  paymentStatus       PaymentStatus @default(PENDING)
  paymentMethod       PaymentMethod?

  // Additional information
  specialInstructions String?
  customerNotes       String?
  technicianNotes     String?

  // Timestamps
  arrivedAt           DateTime?
  startedAt           DateTime?
  completedAt         DateTime?
  cancelledAt         DateTime?
  cancellationReason  String?

  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  // Relationships
  user                User          @relation(fields: [userId], references: [id])
  service             Service       @relation(fields: [serviceId], references: [id])
  address             Address       @relation(fields: [addressId], references: [id])
  technician          Technician?   @relation(fields: [assignedTechnicianId], references: [id])
  payment             Payment?
  bookingAddOns       BookingAddOn[]
  statusHistory       BookingStatusHistory[]
  review              Review?

  @@map("bookings")
}

model BookingAddOn {
  id              String       @id @default(cuid())
  bookingId       String
  serviceAddOnId  String
  quantity        Int          @default(1)
  price           Float
  createdAt       DateTime     @default(now())

  booking         Booking      @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  serviceAddOn    ServiceAddOn @relation(fields: [serviceAddOnId], references: [id])

  @@map("booking_add_ons")
}

model BookingStatusHistory {
  id              String        @id @default(cuid())
  bookingId       String
  status          BookingStatus
  notes           String?
  changedBy       String?       // User ID who changed the status
  timestamp       DateTime      @default(now())

  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("booking_status_history")
}

model Technician {
  id              String   @id @default(cuid())
  employeeId      String   @unique
  firstName       String
  lastName        String
  email           String   @unique
  phoneNumber     String
  avatar          String?
  specializations String[] // Array of specialization areas
  rating          Float?   @default(0)
  totalReviews    Int      @default(0)
  isActive        Boolean  @default(true)
  currentLocation Json?    // Store current GPS coordinates
  workingHours    Json?    // Store working schedule
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  bookings        Booking[]

  @@map("technicians")
}

model Payment {
  id                  String        @id @default(cuid())
  bookingId           String        @unique
  amount              Float
  currency            String        @default("AED")
  method              PaymentMethod
  status              PaymentStatus @default(PENDING)
  stripePaymentId     String?
  stripePaymentIntentId String?
  refundAmount        Float?
  refundReason        String?
  refundedAt          DateTime?
  paidAt              DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  booking             Booking       @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Review {
  id              String   @id @default(cuid())
  bookingId       String   @unique
  userId          String
  rating          Int      // 1-5 stars
  comment         String?
  serviceRating   Int?     // Separate rating for service quality
  timelinessRating Int?    // Separate rating for timeliness
  professionalismRating Int? // Separate rating for professionalism
  isVisible       Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  booking         Booking  @relation(fields: [bookingId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Notification {
  id              String             @id @default(cuid())
  userId          String
  type            NotificationType
  title           String
  message         String
  data            Json?              // Additional notification data
  isRead          Boolean            @default(false)
  readAt          DateTime?
  createdAt       DateTime           @default(now())

  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SystemConfig {
  id              String   @id @default(cuid())
  key             String   @unique
  value           Json
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("system_configs")
}

// Enums
enum UserRole {
  CUSTOMER
  TECHNICIAN
  ADMIN
  SUPER_ADMIN
}

enum ServiceCategory {
  TIRE_CHANGE
  BATTERY_JUMP
  FUEL_DELIVERY
  LOCKOUT_ASSISTANCE
  TOW_SERVICE
  FLAT_TIRE_REPAIR
  ENGINE_REPAIR
  GENERAL_MAINTENANCE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  TECHNICIAN_ASSIGNED
  TECHNICIAN_EN_ROUTE
  TECHNICIAN_ARRIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIAL_REFUND
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  BANK_TRANSFER
  DIGITAL_WALLET
}

enum NotificationType {
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  TECHNICIAN_ASSIGNED
  TECHNICIAN_EN_ROUTE
  TECHNICIAN_ARRIVED
  SERVICE_STARTED
  SERVICE_COMPLETED
  PAYMENT_SUCCESSFUL
  PAYMENT_FAILED
  REVIEW_REQUEST
  PROMOTION
  SYSTEM_MAINTENANCE
}