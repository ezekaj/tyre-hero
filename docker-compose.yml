# TyreHero Emergency Service - Docker Compose Configuration
# 
# Complete production stack with monitoring, logging, and database
# Includes emergency-specific configurations and health monitoring

version: '3.8'

services:
  # Main application service
  tyrehero-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: tyrehero-emergency-service
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://tyrehero:${DB_PASSWORD:-securepassword}@postgres:5432/tyrehero
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
      - CLUSTER_MODE=false  # Disable clustering in container
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tyrehero-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tyrehero.rule=Host(`tyrehero.local`)"
      - "traefik.http.services.tyrehero.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: tyrehero-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=tyrehero
      - POSTGRES_USER=tyrehero
      - POSTGRES_PASSWORD=${DB_PASSWORD:-securepassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - tyrehero-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tyrehero -d tyrehero"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: tyrehero-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis_data:/data
    networks:
      - tyrehero-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: tyrehero-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - tyrehero-app
    networks:
      - tyrehero-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: tyrehero-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tyrehero-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: tyrehero-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-adminpassword}
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - tyrehero-network

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: tyrehero-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - tyrehero-network

  # Log shipping with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: tyrehero-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/tyrehero:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - tyrehero-network

  # Emergency monitoring service
  emergency-monitor:
    build:
      context: ./monitoring
      dockerfile: Dockerfile.emergency-monitor
    container_name: tyrehero-emergency-monitor
    restart: unless-stopped
    environment:
      - MONITOR_URL=http://tyrehero-app:3000
      - ALERT_WEBHOOK=${EMERGENCY_WEBHOOK_URL}
      - CHECK_INTERVAL=30
    depends_on:
      - tyrehero-app
    networks:
      - tyrehero-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  tyrehero-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16