{'role': 'assistant', 'content': 'Now let\'s create the JavaScript file to handle the interactive elements of our website, including the search tabs, mobile menu toggle, and other functionality:\n\n<function_calls>\n<create-file file_path="scripts.js">\n/**\n * FastFit Mobile Tyres - Main JavaScript\n * Handles interactive elements and functionality\n */\n\ndocument.addEventListener(\'DOMContentLoaded\', function() {\n    // Mobile menu toggle\n    const menuToggle = document.querySelector(\'.menu-toggle\');\n    const navMenu = document.querySelector(\'.nav-menu\');\n    \n    if (menuToggle && navMenu) {\n        menuToggle.addEventListener(\'click\', function() {\n            navMenu.classList.toggle(\'active\');\n            \n            // Accessibility - update aria attributes\n            const expanded = navMenu.classList.contains(\'active\');\n            menuToggle.setAttribute(\'aria-expanded\', expanded);\n        });\n        \n        // Close menu when clicking outside\n        document.addEventListener(\'click\', function(event) {\n            if (!menuToggle.contains(event.target) && !navMenu.contains(event.target)) {\n                navMenu.classList.remove(\'active\');\n                menuToggle.setAttribute(\'aria-expanded\', \'false\');\n            }\n        });\n    }\n    \n    // Search tabs functionality\n    const searchTabs = document.querySelectorAll(\'.search-tab\');\n    const searchPanels = document.querySelectorAll(\'.search-panel\');\n    \n    if (searchTabs.length && searchPanels.length) {\n        searchTabs.forEach(tab => {\n            tab.addEventListener(\'click\', function() {\n                // Remove active class from all tabs and panels\n                searchTabs.forEach(t => t.classList.remove(\'active\'));\n                searchPanels.forEach(p => p.classList.remove(\'active\'));\n                \n                // Add active class to clicked tab\n                this.classList.add(\'active\');\n                \n                // Show corresponding panel\n                const tabId = this.getAttribute(\'data-tab\');\n                const panel = document.getElementById(tabId + \'-search\');\n                if (panel) {\n                    panel.classList.add(\'active\');\n                }\n            });\n        });\n    }\n    \n    // Form validation\n    const searchForms = document.querySelectorAll(\'.search-form\');\n    \n    if (searchForms.length) {\n        searchForms.forEach(form => {\n            form.addEventListener(\'submit\', function(event) {\n                event.preventDefault();\n                \n                // Basic validation\n                let isValid = true;\n                const requiredFields = form.querySelectorAll(\'[required]\');\n                \n                requiredFields.forEach(field => {\n                    if (!field.value.trim()) {\n                        isValid = false;\n                        highlightError(field);\n                    } else {\n                        removeError(field);\n                    }\n                });\n                \n                // Postcode validation (UK format)\n                const postcodeFields = form.querySelectorAll(\'input[id$="postcode"]\');\n                postcodeFields.forEach(field => {\n                    if (field.value.trim() && !isValidUKPostcode(field.value.trim())) {\n                        isValid = false;\n                        highlightError(field, \'Please enter a valid UK postcode\');\n                    }\n                });\n                \n                // If form is valid, simulate search\n                if (isValid) {\n                    simulateSearch(form);\n                }\n            });\n        });\n    }\n    \n    // Tyre size help modal\n    const tyreSizeHelpLink = document.querySelector(\'.tyre-size-help-link\');\n    \n    if (tyreSizeHelpLink) {\n        tyreSizeHelpLink.addEventListener(\'click\', function(event) {\n            event.preventDefault();\n            showTyreSizeHelp();\n        });\n    }\n    \n    // Emergency button pulse effect on scroll\n    const emergencyButtons = document.querySelectorAll(\'.btn-emergency\');\n    \n    if (emergencyButtons.length) {\n        window.addEventListener(\'scroll\', function() {\n            emergencyButtons.forEach(button => {\n                // Add/remove animation based on visibility\n                if (isElementInViewport(button)) {\n                    button.style.animationPlayState = \'running\';\n                } else {\n                    button.style.animationPlayState = \'paused\';\n                }\n            });\n        });\n    }\n});\n\n/**\n * Highlight form field with error\n * @param {HTMLElement} field - The form field\n * @param {string} message - Optional error message\n */\nfunction highlightError(field, message) {\n    field.classList.add(\'error\');\n    field.setAttribute(\'aria-invalid\', \'true\');\n    \n    // Remove any existing error message\n    const existingError = field.parentNode.querySelector(\'.error-message\');\n    if (existingError) {\n        existingError.remove();\n    }\n    \n    // Add error message if provided\n    if (message) {\n        const errorMessage = document.createElement(\'div\');\n        errorMessage.className = \'error-message\';\n        errorMessage.textContent = message;\n        field.parentNode.appendChild(errorMessage);\n    }\n    \n    // Add event listener to remove error on input\n    field.addEventListener(\'input\', function() {\n        removeError(field);\n    }, { once: true });\n}\n\n/**\n * Remove error styling from form field\n * @param {HTMLElement} field - The form field\n */\nfunction removeError(field) {\n    field.classList.remove(\'error\');\n    field.setAttribute(\'aria-invalid\', \'false\');\n    \n    // Remove error message if exists\n    const errorMessage = field.parentNode.querySelector(\'.error-message\');\n    if (errorMessage) {\n        errorMessage.remove();\n    }\n}\n\n/**\n * Validate UK postcode format\n * @param {string} postcode - The postcode to validate\n * @returns {boolean} - Whether the postcode is valid\n */\nfunction isValidUKPostcode(postcode) {\n    // Basic UK postcode regex pattern\n    const postcodeRegex = /^[A-Z]{1,2}[0-9][A-Z0-9]? ?[0-9][A-Z]{2}$/i;\n    return postcodeRegex.test(postcode);\n}\n\n/**\n * Simulate search functionality\n * @param {HTMLFormElement} form - The search form\n */\nfunction simulateSearch(form) {\n    // Get the submit button and show loading state\n    const submitButton = form.querySelector(\'button[type="submit"]\');\n    const originalText = submitButton.textContent;\n    submitButton.disabled = true;\n    submitButton.textContent = \'Searching...\';\n    \n    // Simulate API call with timeout\n    setTimeout(function() {\n        // Reset button\n        submitButton.disabled = false;\n        submitButton.textContent = originalText;\n        \n        // Redirect to results page (in a real implementation)\n        window.location.href = \'tyre-results.html\';\n    }, 1500);\n}\n\n/**\n * Show tyre size help modal\n */\nfunction showTyreSizeHelp() {\n    // Create modal container\n    const modal = document.createElement(\'div\');\n    modal.className = \'modal tyre-size-modal\';\n    \n    // Create modal content\n    modal.innerHTML = `\n        <div class="modal-content">\n            <div class="modal-header">\n                <h3>How to Find Your Tyre Size</h3>\n                <button class="modal-close" aria-label="Close">&times;</button>\n            </div>\n            <div class="modal-body">\n                <div class="tyre-size-diagram">\n                    <img src="images/tyre-size-diagram.jpg" alt="Tyre size diagram showing width, profile, and rim size">\n                </div>\n                <div class="tyre-size-explanation">\n                    <h4>Reading Your Tyre Size</h4>\n                    <p>Your tyre size is printed on the sidewall of your tyre. It looks something like: <strong>205/55 R16 91V</strong></p>\n                    \n                    <ul>\n                        <li><strong>Width (205)</strong>: The width of the tyre in millimeters</li>\n                        <li><strong>Profile (55)</strong>: The height of the tyre sidewall as a percentage of the width</li>\n                        <li><strong>Rim Size (16)</strong>: The diameter of the wheel in inches</li>\n                        <li><strong>Load Index (91)</strong>: Indicates the maximum weight the tyre can support</li>\n                        <li><strong>Speed Rating (V)</strong>: Indicates the maximum speed capability of the tyre</li>\n                    </ul>\n                    \n                    <p>For our search tool, you only need to enter the width, profile, and rim size.</p>\n                    \n                    <h4>Where to Find Your Tyre Size</h4>\n                    <ul>\n                        <li>On the sidewall of your current tyres</li>\n                        <li>In your vehicle handbook</li>\n                        <li>Inside the driver\'s door frame</li>\n                        <li>Inside the fuel filler cap</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    // Add modal to page\n    document.body.appendChild(modal);\n    document.body.classList.add(\'modal-open\');\n    \n    // Add event listener to close button\n    const closeButton = modal.querySelector(\'.modal-close\');\n    closeButton.addEventListener(\'click\', function() {\n        closeModal(modal);\n    });\n    \n    // Close when clicking outside modal content\n    modal.addEventListener(\'click\', function(event) {\n        if (event.target === modal) {\n            closeModal(modal);\n        }\n    });\n    \n    // Close on escape key\n    document.addEventListener(\'keydown\', function(event) {\n        if (event.key === \'Escape\') {\n            closeModal(modal);\n        }\n    });\n}\n\n/**\n * Close modal\n * @param {HTMLElement} modal - The modal element\n */\nfunction closeModal(modal) {\n    document.body.classList.remove(\'modal-open\');\n    modal.remove();\n}\n\n/**\n * Check if element is in viewport\n * @param {HTMLElement} element - The element to check\n * @returns {boolean} - Whether the element is in viewport\n */\nfunction isElementInViewport(element) {\n    const rect = element.getBoundingClientRect();\n    return (\n        rect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n}\n\n/**\n * Add accessibility attributes on load\n */\nfunction setupAccessibility() {\n    // Add ARIA attributes to menu toggle\n    const menuToggle = document.querySelector(\'.menu-toggle\');\n    if (menuToggle) {\n        menuToggle.setAttribute(\'aria-expanded\', \'false\');\n        menuToggle.setAttribute(\'aria-controls\', \'nav-menu\');\n    }\n    \n    // Add ARIA attributes to search tabs\n    const searchTabs = document.querySelectorAll(\'.search-tab\');\n    const searchPanels = document.querySelectorAll(\'.search-panel\');\n    \n    if (searchTabs.length && searchPanels.length) {\n        searchTabs.forEach((tab, index) => {\n            const panelId = tab.getAttribute(\'data-tab\') + \'-search\';\n            tab.setAttribute(\'role\', \'tab\');\n            tab.setAttribute(\'aria-controls\', panelId);\n            tab.setAttribute(\'aria-selected\', tab.classList.contains(\'active\') ? \'true\' : \'false\');\n            tab.id = \'tab-\' + tab.getAttribute(\'data-tab\');\n            \n            const panel = document.getElementById(panelId);\n            if (panel) {\n                panel.setAttribute(\'role\', \'tabpanel\');\n                panel.setAttribute(\'aria-labelledby\', tab.id);\n            }\n        });\n    }\n}\n\n// Call setup function on load\ndocument.addEventListener(\'DOMContentLoaded\', setupAccessibility);\n</create-file>\n</function_calls>'}